//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Text;
using System.Data.Objects;

using Microsoft.Practices.EnterpriseLibrary.Validation;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Common;
using Microsoft.Practices.EnterpriseLibrary.Logging;

using MovieBooking.DAL.Model;

using MovieBooking.SystemFrameworks;
using Microsoft.Practices.EnterpriseLibrary.Caching;

namespace MovieBooking.BLL.POCOModel
{
    public interface ISystemParameterRepository : IDisposable
    {
        IEnumerable<mb_SystemParameter> GetSystemParameters(string category);
    }

    public partial class SystemParameterRepository : ISystemParameterRepository, IDisposable
    {
        private Entities ctx = new Entities();

        #region dispose
        private bool disposed = false;

        protected virtual void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    ctx.Dispose();
                }
            }
            this.disposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
        #endregion

        public IEnumerable<mb_SystemParameter> GetSystemParameters(string category)
        {
            ICacheManager cache = CacheFactory.GetCacheManager();
            string cacheName = string.Format("SystemParam-{0}", category);
            ObjectResult<mb_SystemParameter> roParams = null;

            if (cache.Contains(cacheName))
            {
                roParams = cache.GetData(cacheName) as ObjectResult<mb_SystemParameter>;
            }
            else
            {
                ctx.mb_SystemParameter.Where( sp => sp).ToList();
                //roParams = ctx.GetSystemParams(category);
                //using (Entities ctx = new Entities())
                //{
                //    foreach (mb_SystemParameter ps in ctx.GetSystemParams(category))
                //    {
                //        roParams.Add(new mb_SystemParameter()
                //        {
                //            Active = ps.Active,
                //            Category = ps.Category,
                //            ID = ps.ID,
                //            ItemName = ps.ItemName,
                //            ItemValue = ps.ItemValue, Remarks = ps.Remarks, SortOrder = ps.SortOrder });
                //    }
                //}
                //
                cache.Add(cacheName, roParams);
            }
            return roParams.AsEnumerable();
        }
    }
}
