//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Transactions;
using System.Web.Security;
using Microsoft.Practices.EnterpriseLibrary.Common.Configuration;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using MovieBooking.DLL.Entities;
using MovieBooking.Model.Entities;
using System.Reflection;

/* -----------------------------------------------------------------
 * REVISION HISTORY
 * -----------------------------------------------------------------
 * DATE           AUTHOR          REVISION		DESCRIPTION
 * 20 May 2012    Mansoor M I     0.1			Intial version
 * 													
 * 																									
 * 													
 * 
 */

namespace MovieBooking.BLL.Entities
{
    
    public partial class RegisteredUser : mb_RegisteredUser
    {
        #region Primitive Properties

        [NotNullValidator(MessageTemplate = "NRIC - Cannot be null!")]
        [StringLengthValidator(9, RangeBoundaryType.Inclusive, 9, RangeBoundaryType.Inclusive, MessageTemplate = "NRIC must be 9 characters long!")]
        [RegexValidator(@"^(s|t|g)[0-9]{7}[a-jz]{1}$", MessageTemplate = "Invalid NRIC! e.g. S1234567A, T1212121B, G1213145C")]
        public override string NRIC
        {
            get;
            set;
        }

        public override Nullable<System.DateTime> DOB
        {
            get;
            set;
        }

        public string UserName
        {
            get;
            set;
        }

        public string Email
        {
            get;
            set;
        }

        public RegisteredUser()
        {
        }

        public RegisteredUser(mb_RegisteredUser mbUser)
        {
            //PropertyInfo[] propertyInfos = mbUser.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);
            //Get all public or private non-static properties declared in this class (no inherited properties) - that have a getter and setter.
            //PropertyInfo[] propertyInfos = this.GetType().GetProperties(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).Where(p => p.GetGetMethod(true) != null && p.GetSetMethod(true) != null).ToArray();
            //foreach (var propertyInfo in propertyInfos)
            //{
            //    //PropertyInfo source = this.GetType().GetProperty(p.Name, BindingFlags.Public | BindingFlags.Instance);
            //    //p.SetValue (p, source.GetValue(mbUser, null), null);
            //    var obj = propertyInfo.GetValue(mbUser, null);

            //    propertyInfo.SetValue(this, obj, null);
            //}
            this.AccountNo = mbUser.AccountNo;
            this.Address = mbUser.Address;
            this.BankName = mbUser.BankName;
            this.DOB = mbUser.DOB;
            this.NRIC = mbUser.NRIC;
            this.UserId = mbUser.UserId;
            this.Active = mbUser.Active;
            this.Email = mbUser.aspnet_Membership.Email;
            this.UserName = mbUser.aspnet_Membership.aspnet_Users.UserName;
        }

        public void CopyTo(mb_RegisteredUser mbUser)
        {
            mbUser.AccountNo = this.AccountNo;
            mbUser.Address = this.Address;
            mbUser.BankName = this.BankName;
            mbUser.DOB = this.DOB;
            mbUser.NRIC = this.NRIC;
            mbUser.Active = this.Active;
            mbUser.UserId = this.UserId;
            //mbUser.aspnet_Membership.Email = this.Email;
            //mbUser.aspnet_Membership.aspnet_Users.UserName = this.UserName;
        }
        #endregion

    }

    public sealed class RegisteredUserRepository
    {

        // Global variable to store the ExceptionManager instance. 
        ExceptionManager exManager;

        #region Ctor
        
        public RegisteredUserRepository()
        {
            // Resolve the default ExceptionManager object from the container.
            exManager = EnterpriseLibraryContainer.Current.GetInstance<ExceptionManager>();
        }

        #endregion
 
        #region Methods

        public RegisteredUser FindById(System.Guid id)
        {
            RegisteredUser _user = null;
            try
            {
                using (IRepository<mb_RegisteredUser> mbRep = new MovieBookingRepository<mb_RegisteredUser>())
                {
                    var mbUser = mbRep.First(u => u.UserId == id && u.Active == true);
                    _user = new RegisteredUser(mbUser);
                }
            }
            catch (Exception ex)
            {
                exManager.HandleException(ex, "MovieBookingExceptionType");
                throw ex;
            }

            return _user as RegisteredUser;
        }

        public int Insert(RegisteredUser user)
        {
            int status = -1;
            try
            {
                MembershipCreateStatus crStatus = InsertUser(user);
                status = (int) crStatus;
            }
            catch(Exception ex) 
            {
                exManager.HandleException(ex, "MovieBookingExceptionType");
                throw ex;
            }

            return status;
        }

        public IEnumerable<RegisteredUser> FindAll()
        {
            List<RegisteredUser> _users = null;
            try
            {
                using (IRepository<mb_RegisteredUser> mbRep = new MovieBookingRepository<mb_RegisteredUser>())
                {
                    var users = from us in mbRep.FetchAll()
                                select new RegisteredUser(us);
                    _users = users.ToList<RegisteredUser>();
                }
            }
            catch (Exception ex)
            {
                exManager.HandleException(ex, "MovieBookingExceptionType");
                throw ex;
            }

            return _users;
        }

        public int Update(RegisteredUser _user)
        {
            int status = -1;
            using (IRepository<mb_RegisteredUser> mbRep = new MovieBookingRepository<mb_RegisteredUser>())
            {
                var user = mbRep.First(u => u.UserId == _user.UserId);
                _user.CopyTo(user);
                //mbRep.Attach(user);
                mbRep.SaveChanges();
                status = 0;
            }
            return status;
        }

        #endregion

        #region private methods

        private MembershipCreateStatus InsertUser(RegisteredUser user)
        {
            MembershipCreateStatus crStatus = MembershipCreateStatus.UserRejected;
            using (IRepository<mb_RegisteredUser> mbRep = new MovieBookingRepository<mb_RegisteredUser>())
            {
                if (mbRep.IsValid(user as mb_RegisteredUser))
                {

                    // Define a transaction scope for the operations.
                    TransactionOptions options = new TransactionOptions
                    {
                        IsolationLevel = System.Transactions.IsolationLevel.ReadCommitted,
                        Timeout = TransactionManager.DefaultTimeout
                    };

                    using (var scope = new TransactionScope(TransactionScopeOption.RequiresNew, options))
                    {
                        //Create the MembershipUser first using aspnet provider
                        MembershipUser _orgUser = Membership.CreateUser(
                            user.aspnet_Membership.aspnet_Users.UserName,
                            user.aspnet_Membership.Password,
                            user.aspnet_Membership.Email, null, null, true, null,
                            out crStatus);

                        //Create the Registered user
                        if (crStatus == MembershipCreateStatus.Success)
                        {
                            var _user = new mb_RegisteredUser
                            {
                                UserId = (System.Guid)_orgUser.ProviderUserKey,
                                DOB = user.DOB,
                                NRIC = user.NRIC,
                                BankName = user.BankName,
                                AccountNo = user.AccountNo,
                                Address = user.Address,
                                PostalCode = user.PostalCode
                            };
                            mbRep.Add(_user);
                            mbRep.SaveChanges();
                        }
                        // Commit the Transaction
                        scope.Complete();
                    }
                }
            }

            return crStatus;
        }



        #endregion
    }
}