//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Transactions;
using System.Web.Security;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using Microsoft.Practices.EnterpriseLibrary.Validation;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using MovieBooking.DAL;
using MovieBooking.Model.Entities;
using Microsoft.Practices.EnterpriseLibrary.Common.Configuration;

namespace MovieBooking.BLL.Entities
{
    public interface IRegisteredUser : IDisposable
    {
        IEnumerable<mb_RegisteredUser> GetRegisteredMembers();
        bool InsertMember(ref MembershipCreateStatus createStatus);
    }

    public partial class RegisteredUser : mb_RegisteredUser, IRegisteredUser, IDisposable
    {
        // Global variable to store the ExceptionManager instance. 
        ExceptionManager exManager; 
        
        private MovieBookingEntitiesContext context = null;

        #region dispose
        private bool disposed = false;

        protected virtual void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    context.Dispose();
                }
            }
            this.disposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }        
        #endregion

        #region Primitive Properties

        [NotNullValidator(MessageTemplate = "NRIC - Cannot be null!")]
        [StringLengthValidator(9, RangeBoundaryType.Inclusive, 9, RangeBoundaryType.Inclusive, MessageTemplate = "NRIC must be 9 characters long!")]
        [RegexValidator(@"^(s|t|g)[0-9]{7}[a-jz]{1}$", MessageTemplate = "Invalid NRIC! e.g. S1234567A, T1212121B, G1213145C")]
        public override string NRIC
        {
            get;
            set;
        }

        public override Nullable<System.DateTime> DOB
        {
            get;
            set;
        }

        #endregion

        #region Customised Methods

        public bool InsertMember(ref MembershipCreateStatus createStatus)
        {
            context = new MovieBookingEntitiesContext();
            // Resolve the default ExceptionManager object from the container.
            exManager = EnterpriseLibraryContainer.Current.GetInstance<ExceptionManager>();
            //this.DOB = null;
            //this.NRIC = null;
            createStatus = exManager.Process(() => Insert(), "MovieBookingExceptionType");
            return (createStatus == MembershipCreateStatus.Success);
        }

        private MembershipCreateStatus Insert()
        {
            MembershipCreateStatus crStatus = MembershipCreateStatus.UserRejected;

            if (this.IsValid())
            {

                // Define a transaction scope for the operations.
                TransactionOptions options = new TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.ReadCommitted,
                    Timeout = TransactionManager.DefaultTimeout
                };

                using (var scope = new TransactionScope(TransactionScopeOption.RequiresNew, options))
                {
                    //Create the MembershipUser first using aspnet provider
                    MembershipUser _orgUser = Membership.CreateUser(
                        this.aspnet_Membership.aspnet_Users.UserName,
                        this.aspnet_Membership.Password, this.aspnet_Membership.Email, null, null, true, null,
                        out crStatus);

                    //Create the Registered user
                    if (crStatus == MembershipCreateStatus.Success)
                    {
                        var _user = new mb_RegisteredUser
                        {
                            UserId = (System.Guid)_orgUser.ProviderUserKey,
                            DOB = this.DOB,
                            NRIC = this.NRIC,
                            BankName = this.BankName,
                            AccountNo = this.AccountNo,
                            Address = this.Address,
                            PostalCode = this.PostalCode
                        };

                        context.mb_RegisteredUser.AddObject(_user);
                        context.SaveChanges();
                    }
                    // Commit the Transaction
                    scope.Complete();
                }
            }
            return crStatus;
        }

        public IEnumerable<mb_RegisteredUser> GetRegisteredMembers()
        {
            //List<mb_ExtRegisteredUser> roUsers = new List<mb_ExtRegisteredUser>();
            //using (DAL.Model.Entities ctx = new DAL.Model.Entities())
            //{
            //    var users = ctx.GetExtRegisteredUsers();
            //    foreach (DAL.Model.mb_ExtRegisteredUser ru in users)
            //        roUsers.Add(new mb_ExtRegisteredUser()
            //        {
            //            AccountNo = ru.AccountNo,
            //            Active = ru.Active,
            //            Address = ru.Address,
            //            BankName = ru.BankName,
            //            DOB = ru.DOB,
            //            UserId = ru.UserId,
            //            UserName = ru.UserName
            //        });
            //}
            //return roUsers.AsReadOnly();
            context = new MovieBookingEntitiesContext();
            var users = context.mb_RegisteredUser;
            return users.ToList();
        }

        private bool IsValid()
        {
            StringBuilder builder = new StringBuilder(string.Empty);
            //Create a new validator using the ValidationFactory method
            Validator pValidator = ValidationFactory.CreateValidator<RegisteredUser>();
            ValidationResults results = pValidator.Validate(this); // new ValidationResults();
            //validator.Validate(this, results);
            if (!results.IsValid)
            {
                builder.Append("\t+Validation Error(s):\n");
                foreach (ValidationResult result in results)
                {
                    builder.Append( String.Format("\t Message=> {0} (Key: {1}, Tag: {2}, Target: {3})\n", 
                        result.Message, result.Key, result.Tag, result.Target.ToString() ));
                }
                throw new Exception(builder.ToString());
            }
            return results.IsValid;
        }
        
        #endregion

    }
}