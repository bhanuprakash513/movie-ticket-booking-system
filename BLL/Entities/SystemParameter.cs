//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using MovieBooking.DAL;
using MovieBooking.Model.Entities;
using Microsoft.Practices.EnterpriseLibrary.Common.Configuration;
using MovieBooking.DLL.Entities;

namespace MovieBooking.BLL.Entities
{

    public partial class SystemParameter : mb_SystemParameter
    {
        public SystemParameter() { }
        public SystemParameter(mb_SystemParameter mbSP)
        {
            this.Active = mbSP.Active;
            this.Category = mbSP.Category;
            this.ID = mbSP.ID;
            this.ItemName = mbSP.ItemName;
            this.ItemValue = mbSP.ItemValue;
            this.Remarks = mbSP.Remarks;
            this.SortOrder = mbSP.SortOrder;
        }
    }

    public class SystemParameterRepository
    {
        // Global variable to store the ExceptionManager instance. 
        ExceptionManager exManager;
        ICacheManager cache = null;

        public SystemParameterRepository()
        {
            //cache = CacheFactory.GetCacheManager();
            //// Resolve the default ExceptionManager object from the container.
            //exManager = EnterpriseLibraryContainer.Current.GetInstance<ExceptionManager>();
        }

        public IEnumerable<SystemParameter> GetSystemParameters(string category)
        {
            IList<SystemParameter> roParams = null;
            try
            {
                string cacheName = string.Format("SystemParam-{0}", category.Trim());

                if (cache.Contains(cacheName))
                {
                    roParams = cache.GetData(cacheName) as List<SystemParameter>;
                }
                else
                {
                    using (IRepository<mb_SystemParameter> sysP = new MovieBookingRepository<mb_SystemParameter>())
                    {
                        var sysps = from p in sysP.Find(sp => sp.Category == category && sp.Active == true)
                                    select new SystemParameter(p);
                        roParams = sysps.ToList<SystemParameter>();
                    }
                    //Add it to the Cache                        
                    cache.Add(cacheName, roParams);
                }
            }
            catch (Exception ex)
            {
                exManager.HandleException(ex, "MovieBookingExceptionType");
                throw ex;
            }
            return roParams;
        }
    }

}
